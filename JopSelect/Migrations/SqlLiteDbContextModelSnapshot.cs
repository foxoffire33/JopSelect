// <auto-generated />
using System;
using JopSelectData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JopSelect.Migrations
{
    [DbContext(typeof(SqlLiteDbContext))]
    partial class SqlLiteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("JopSelectData.Models.Address", b =>
                {
                    b.Property<Guid>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("HouseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.HasKey("AddressID");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("JopSelectData.Models.Branche", b =>
                {
                    b.Property<Guid>("BrancheID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.HasKey("BrancheID");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("JopSelectData.Models.CarLicense", b =>
                {
                    b.Property<Guid>("CarLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("CarLicenseType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("ModelType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.HasKey("CarLicenseId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("CarLicenses");
                });

            modelBuilder.Entity("JopSelectData.Models.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("JopSelectData.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Kvk")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("NumberOfEmployees")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Webpage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyID");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("JopSelectData.Models.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("JopSelectData.Models.Experiance", b =>
                {
                    b.Property<Guid>("ExperianceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BrancheId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndedDateOnly")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("ExperianceType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDateOnly")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.HasKey("ExperianceId");

                    b.HasIndex("BrancheId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("ResumeId");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("Experiances");
                });

            modelBuilder.Entity("JopSelectData.Models.Favorite", b =>
                {
                    b.Property<Guid>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("ModelType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("FavoriteId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("JopSelectData.Models.Reaction", b =>
                {
                    b.Property<Guid>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("ModelType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VacancyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VacancyOd")
                        .HasColumnType("TEXT");

                    b.HasKey("ReactionId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("ResumeId");

                    b.HasIndex("UpdatedByForeignKey");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("JopSelectData.Models.Resume", b =>
                {
                    b.Property<Guid>("ResumeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AddressID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BirthPlaceCityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Nationality")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Phone")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.HasKey("ResumeID");

                    b.HasIndex("AddressID");

                    b.HasIndex("BirthPlaceCityId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("JopSelectData.Models.Skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("SkillType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.HasKey("SkillId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("JopSelectData.Models.SkillScore", b =>
                {
                    b.Property<Guid>("SkillScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LanguageType")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ModelType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("SkillScoreType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VacancyId")
                        .HasColumnType("TEXT");

                    b.HasKey("SkillScoreId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SkillId");

                    b.HasIndex("UpdatedByForeignKey");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("SkillScores");
                });

            modelBuilder.Entity("JopSelectData.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JopSelectData.Models.Vacancy", b =>
                {
                    b.Property<Guid>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BrancheID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FunctionDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FunctionRequirements")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("HolidaysAYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HoursAWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaximumSalary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimalAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimalSalary")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedByForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("VacancyDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("VacancyType")
                        .HasColumnType("INTEGER");

                    b.HasKey("VacancyId");

                    b.HasIndex("BrancheID");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedByForeignKey");

                    b.HasIndex("UpdatedByForeignKey");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("JopSelectData.Models.Address", b =>
                {
                    b.HasOne("JopSelectData.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JopSelectData.Models.Branche", b =>
                {
                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JopSelectData.Models.CarLicense", b =>
                {
                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JopSelectData.Models.Company", b =>
                {
                    b.HasOne("JopSelectData.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JopSelectData.Models.Country", b =>
                {
                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JopSelectData.Models.Experiance", b =>
                {
                    b.HasOne("JopSelectData.Models.Branche", "Branche")
                        .WithMany()
                        .HasForeignKey("BrancheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branche");

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("Resume");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JopSelectData.Models.Favorite", b =>
                {
                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JopSelectData.Models.Reaction", b =>
                {
                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Resume");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("JopSelectData.Models.Resume", b =>
                {
                    b.HasOne("JopSelectData.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.City", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("BirthPlace");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JopSelectData.Models.Skill", b =>
                {
                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JopSelectData.Models.SkillScore", b =>
                {
                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");

                    b.HasOne("JopSelectData.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Resume");

                    b.Navigation("Skill");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("JopSelectData.Models.User", b =>
                {
                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JopSelectData.Models.Vacancy", b =>
                {
                    b.HasOne("JopSelectData.Models.Branche", "Branche")
                        .WithMany()
                        .HasForeignKey("BrancheID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JopSelectData.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branche");

                    b.Navigation("City");

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
